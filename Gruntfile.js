// Modified from a Gruntfile generated by [Yeoman](http://yeoman.io/)

'use strict';

var lrSnippet = require('grunt-contrib-livereload/lib/utils').livereloadSnippet;
var mountFolder = function(connect, dir) {
  return connect.static(require('path').resolve(dir));
};

module.exports = function(grunt) {
  // Load all grunt tasks.  (Instead of grunt.loadNpmTasks('grunt-ember-templates'), ...)
  require('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);

  // Grunt configuration.
  // https://github.com/cowboy/grunt/blob/master/docs/getting_started.md
  grunt.initConfig({
    vars: {
      app: 'app',
      test: 'test',
      dist: 'dist',
      temp: '.tmp'
    },

    // Project configuration
    // ---------------------

    // Watch for file changes and trigger connect.livereload.
    // https://github.com/gruntjs/grunt-contrib-watch
    watch: {
      coffee: {
        files: ['<%= vars.app %>/scripts/**/*.coffee'],
        tasks: ['coffee:dist']
      },
      coffeeTest: {
        files: ['test/spec/**/*.coffee'],
        tasks: ['coffee:test']
      },
      compass: {
        files: ['<%= vars.app %>/styles/**/*.{scss,sass}'],
        tasks: ['compass']
      },
      ember_templates: {
        files: [
          'app/scripts/ui/**/*.hbs',
          'app/scripts/demo/**/*.hbs'
        ],
        tasks: ['ember_templates', 'livereload']
      },
      livereload: {
        files: [
          '<%= vars.app %>/*.html',
          '{<%= vars.temp %>,<%= vars.app %>}/styles/**/*.css',
          '{<%= vars.temp %>,<%= vars.app %>}/styles/fonts/**/*',
          '{<%= vars.temp %>,<%= vars.app %>}/scripts/**/*.js',
          '<%= vars.app %>/images/**/*.{png,jpg,jpeg,webp}',
          '<%= vars.test %>/index.html',
          '<%= vars.test %>/features/**/*',
          '<%= vars.test %>/spec/**/*.js'
        ],
        tasks: ['livereload']
      }
    },

    // Run Connect as personal web server for tasks like `grunt test` and `grunt dist`.
    // https://github.com/gruntjs/grunt-contrib-connect
    connect: {
      options: {
        port: 9000,
        hostname: '0.0.0.0'  // Allow access to the server from outside
      },
      livereload: {
        options: {
          middleware: function(connect) {
            return [
              lrSnippet,
              mountFolder(connect, '.tmp'),  // <%= vars.temp %>
              mountFolder(connect, 'app')    // <%= vars.app %>
            ];
          }
        }
      },
      test: {
        options: {
          middleware: function(connect) {
            return [
              lrSnippet,
              mountFolder(connect, '.tmp'),  // <%= vars.temp %>
              mountFolder(connect, 'test'),  // <%= vars.test %>
              mountFolder(connect, 'app')    // <%= vars.app %>
            ];
          }
        }
      },
      dist: {
        options: {
          middleware: function(connect) {
            return [
              mountFolder(connect, 'dist')   // <%= vars.dist %>
            ];
          }
        }
      }
    },
    open: {
      server: {
        path: 'http://localhost:<%= connect.options.port %>'
      }
    },

    // `grunt clean`
    clean: {
      dist: ['<%= vars.temp %>', '<%= vars.dist %>/*'],
      server: '<%= vars.temp %>'
    },

    // `grunt jshint`
    // Available options http://www.jshint.com/docs/
    jshint: {
      options: {
        jshintrc: '.jshintrc'
      },
      all: [
        'Gruntfile.js',
        '<%= vars.app %>/scripts/**/*.js',
        '!<%= vars.app %>/scripts/vendor/**/*.js',
        '!<%= vars.app %>/scripts/**/templates.js',
        'test/spec/**/*.js'
      ]
    },

    // Mocha test runner through PhantomJS.
    mocha: {
      all: {
        options: {
          run: true,
          urls: ['http://localhost:<%= connect.options.port %>/index.html']
        }
      }
    },

    // Coffee to JS compilation.
    coffee: {
      dist: {
        files: [{
          // rather than compiling multiple files here you should
          // require them into your main .coffee file
          expand: true,
          cwd: '<%= vars.app %>/scripts',
          src: '*.coffee',
          dest: '<%= vars.temp %>/scripts',
          ext: '.js'
        }]
      },
      test: {
        files: [{
          expand: true,
          cwd: '<%= vars.temp %>/spec',
          src: '*.coffee',
          dest: 'test/spec'
        }]
      }
    },

    // Compile .scss/.sass to .css using Compass.
    // http://compass-style.org/help/tutorials/configuration-reference/#configuration-properties
    compass: {
      options: {
        sassDir: '<%= vars.app %>/styles',
        cssDir: '<%= vars.temp %>/styles',
        imagesDir: '<%= vars.app %>/images',
        javascriptsDir: '<%= vars.app %>/scripts',
        fontsDir: '<%= vars.app %>/styles/fonts',
        importPath: 'components',
        force: true,
        config: '.compass.rb'  // Need to use .compass.rb to get FontAwesome working
      },
      dist: {},
      server: {
        options: {
          debugInfo: true
        }
      }
    },

    // Compile Ember Handlebar templates.
    // https://github.com/dgeb/grunt-ember-templates
    ember_templates: {
      compile: {
        files: {
          'app/scripts/ui/templates.js': 'app/scripts/ui/**/*.hbs',
          'app/scripts/demo/templates.js': 'app/scripts/demo/**/*.hbs'
        },
        options: {
          templateName: function(sourceFile) {
            if (sourceFile.match(/app\/scripts\/demo\//)) {
              // Remove the "app/scripts/demo/" prefix from demo template names.
              return sourceFile.replace(/app\/scripts\/demo\//, '');
            } else {
              // Remove the "app/scripts/ui/" prefix from library template names.
              return sourceFile.replace(/app\/scripts\/ui\//, '');
            }
          }
        }
      }
    },


    // `grunt build` configuration
    // -------------------

    // Not used since Uglify task does concat, but available if needed.
    // concat: {
    //   dist: {}
    // },

    // Concat and minify .js.  There are sourcemap options available.
    // https://github.com/gruntjs/grunt-contrib-uglify
    uglify: {
      options: {
        banner: '/*! Version <%= grunt.template.today("yyyy-mm-dd") %> */'
      },
      dist: {
        files: {
          '<%= vars.dist %>/scripts/demo.js': '<%= vars.app %>/scripts/demo/**/*.js',
          '<%= vars.dist %>/scripts/ember-ui.js': '<%= vars.app %>/scripts/ui/**/*.js'
        }
      }
    },

    // Renames JS/CSS by prepending a hash of their contents for cache busting.
    rev: {
      js: 'scripts/**/*.js',
      css: 'styles/**/*.css'
    },

    // Concat files listed in index.html in blocks between <!-- build: --> and <!-- endbuild -->.
    // https://github.com/yeoman/grunt-usemin
    useminPrepare: {  // concat files listed in HTML
      html: '<%= vars.app %>/index.html',
      options: {
        dest: '<%= vars.dist %>'
      }
    },
    usemin: {  // update references in HTML/CSS to revved files
      html: ['<%= vars.dist %>/**/*.html'],
      css: ['<%= vars.dist %>/styles/**/*.css'],
      options: {
        dirs: ['<%= vars.dist %>']
      }
    },

    // Compress images using OptiPNG and jpegtran.
    // https://github.com/gruntjs/grunt-contrib-imagemin
    imagemin: {
      dist: {
        files: [{
          expand: true,
          cwd: '<%= vars.app %>/images',
          src: '**/*.{png,jpg,jpeg}',
          dest: '<%= vars.dist %>/images'
        }]
      }
    },

    // Compress CSS, inline @import, output one file.
    // https://github.com/gruntjs/grunt-contrib-cssmin
    cssmin: {
      dist: {
        files: {
          '<%= vars.dist %>/styles/main.css': [
            '<%= vars.temp %>/styles/**/*.css',
            '<%= vars.app %>/styles/**/*.css'
          ]
        }
      }
    },

    // Minifies HTML using html-minifier.
    // https://github.com/gruntjs/grunt-contrib-htmlmin
    htmlmin: {
      dist: {
        options: {
          removeComments: true,
          removeCommentsFromCDATA: true,
          //collapseWhitespace: true,  // https://github.com/yeoman/grunt-usemin/issues/44
          collapseBooleanAttributes: true,
          // removeAttributeQuotes: true,
          removeRedundantAttributes: true,
          useShortDoctype: true,
          removeEmptyAttributes: true,
          // removeOptionalTags: true
        },
        files: [{
          expand: true,
          cwd: '<%= vars.app %>',
          src: '*.html',
          dest: '<%= vars.dist %>'
        }]
      }
    },

    // Copy files that haven't been otherwised processed (i.e. the .js, .css, .html, and images).
    // https://github.com/gruntjs/grunt-contrib-copy
    copy: {
      dist: {
        files: [
          {
            expand: true,
            dot: true,
            cwd: '<%= vars.app %>',
            dest: '<%= vars.dist %>',
            src: [
              '*.{ico,txt}',
              // 'styles/fonts/*',  // TODO: Error app/styles/fonts/FontAwesome.otf; maybe ln -s?
            ]
          }
        ]
      }
    },

    // Generate application cache manifest.
    // https://github.com/gunta/grunt-manifest
    manifest: {
      generate: {
        options: {
          // fallback: ["/ /offline.html"],
          preferOnline: true,
          verbose: true,
          timestamp: true,
          // Everything under dist except `exclude`.
          basePath: '<%= vars.dist %>',
          exclude: [
            'robots.txt'
          ]
        },
        src: [
          '**/*'
        ],
        dest: '<%= vars.dist %>/manifest.appcache'
      }
    }
  });

  grunt.renameTask('regarde', 'watch');

  // `grunt server`, `grunt server:test`, and `grunt server:dist`
  grunt.registerTask('server', function (target) {
    // `grunt server:*`
    if (target === 'dist') {
      return grunt.task.run(['build', 'open', 'connect:dist:keepalive']);
    } else if (target === 'test') {
      return grunt.task.run([
        'clean:server',
        'ember_templates',
        'coffee:dist',
        'compass:server',
        'livereload-start',
        'connect:test',
        'open',
        'watch'
      ]);
    }

    grunt.task.run([
      'clean:server',
      'ember_templates',
      'coffee:dist',
      'compass:server',
      'livereload-start',
      'connect:livereload',
      'open',
      'watch'
    ]);
  });

  // `grunt test` (Mocha command line testing)
  grunt.registerTask('test', [
    'clean:server',
    'ember_templates',
    'coffee',
    'compass',
    'connect:test',
    'mocha'
  ]);

  // `grunt build`
  grunt.registerTask('build', [
    'clean:dist',
    'ember_templates',
    'coffee',
    'compass:dist',
    'useminPrepare',
    'imagemin',
    'htmlmin',
    'concat',
    'cssmin',
    'uglify',
    'copy',
    'usemin',
    'rev',  // TODO: Where should this go?
    'manifest'
  ]);

  // `grunt` for production
  grunt.registerTask('default', [
    'jshint',
    'test',
    'build'
  ]);
};
